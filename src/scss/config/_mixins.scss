@use "sass:math";

//----------------------------------------------------------------
// ? LAYOUTS UTILS:

// * Layout Displays:
@mixin createDisplay($bp: "") {
	$displays: (
		"inline": inline,
		"inblock": inline-block,
		"block": block,
		"flex": flex,
		"inflex": inline-flex,
		"grid": grid,
		"ingrid": inline-grid,
		"none": none,
		"table": table,
	);

	@if $classes == true {
		@each $k, $v in $displays {
			@if $bp== "" {
				.d-#{$k} {
					display: #{$v};
				}
			} @else {
				.d-#{$bp}-#{$k} {
					display: #{$v};
				}
			}
		}
	}
}

// * FLEXBOX FACTORS: Grow, Shrink and Basis
// @mixin createFlexFactor($bp: "") {
// 	@if ($classes == true) {
// 		@if ($bp == "") {
// 			@for $i from 0 through 10 {
// 				.flex-grow-#{$i} {
// 					flex-grow: #{$i};
// 				}

// 				.flex-shrink-#{$i} {
// 					flex-shrink: #{$i};
// 				}
// 			}

// 			@for $i from 0 through 20 {
// 				.flex-basis-#{$i} {
// 					flex-basis: calc(100% / #{$i});
// 				}
// 			}
// 		} @else {
// 			@for $i from 0 through 10 {
// 				.flex-grow-#{$bp}-#{$i} {
// 					flex-grow: #{$i};
// 				}

// 				.flex-shrink-#{$bp}-#{$i} {
// 					flex-shrink: #{$i};
// 				}
// 			}

// 			@for $i from 0 through 10 {
// 				.flex-basis-#{$bp}-#{$i} {
// 					flex-basis: calc(100% / #{$i});
// 				}
// 			}
// 		}
// 	}
// }

// * FLEXBOX: ALIGNMENTS: items and justify
@mixin createFlexAlignments($bp: "") {
	$alignItems: (
		"start": flex-start,
		"end": flex-end,
		"center": center,
		"baseline": baseline,
		"stretch": stretch,
	);

	$justifyContent: (
		"start": flex-start,
		"end": flex-end,
		"center": center,
		"around": space-around,
		"between": space-between,
		"evenly": space-evenly,
	);

	@if $classes == true {
		@if ($items == true) {
			@each $k, $v in $alignItems {
				@if ($bp == "") {
					.items-#{$k} {
						align-items: #{$v};
					}
				} @else {
					.items-#{$bp}-#{$k} {
						align-items: #{$v};
					}
				}
			}
		}

		@if ($justify == true) {
			@each $k, $v in $justifyContent {
				@if ($bp == "") {
					.justify-#{$k} {
						justify-content: #{$v};
					}
				} @else {
					.justify-#{$k}-#{$bp} {
						justify-content: #{$v};
					}
				}
			}
		}
	}
}

// * FLEXBOX: WORKFLOWS: Direction and Wraps
@mixin createFlexFlows($bp: "") {
	$flexDirections: (
		"row": row,
		"row-reverse": row-reverse,
		"column": column,
		"column-reverse": column-reverse,
	);

	$flexWraps: (
		"wrap": wrap,
		"wrap-reverse": wrap-reverse,
		"nowrap": nowrap,
	);

	@if ($classes == true) {
		@if ($bp == "") {
			@each $k, $v in $flexDirections {
				.flex-#{$k} {
					flex-direction: #{$v};
				}
			}

			@each $k, $v in $flexWraps {
				.flex-#{$k} {
					flex-wrap: #{$v};
				}
			}
		} @else {
			@each $k, $v in $flexDirections {
				.flex-#{$bp}-#{$k} {
					flex-direction: #{$v};
				}
			}

			@each $k, $v in $flexWraps {
				.flex-#{$bp}-#{$k} {
					flex-wrap: #{$v};
				}
			}
		}
	}
}

// * FLEXBOX ORDERING:
@mixin createFlexOrdering($bp: "", $negative: true) {
	@if ($classes == true) {
		@if ($bp == "") {
			@for $i from 1 through 10 {
				@if ($negative == true) {
					.order_#{$i} {
						order: -#{$i};
					}
				} @else {
					.order-#{$i} {
						order: #{$i};
					}
				}
			}
		} @else {
			@for $i from 1 through 10 {
				@if ($negative == true) {
					.order_#{$bp}#{$i} {
						order: -#{$i};
					}
				} @else {
					.order-#{$bp}-#{$i} {
						order: #{$i};
					}
				}
			}
		}
	}
}

// * FLEXBOX: COLUMN GRID SYSTEM:
@mixin createFlexColumnsGrid($bp: "", $columns, $gutter) {
	@if ($classes == true) {
		@for $i from 1 through $columns {
			@if ($bp == "") {
				.flex-col-#{$i} {
					flex: 0 0 #{math.div($i, $columns) * 100%};
					max-width: #{math.div($i, $columns) * 100%};
					padding-left: math.div($gutter, 2);
					padding-right: math.div($gutter, 2);
				}
			} @else {
				.flex-col-#{$bp}-#{$i} {
					flex: 0 0 #{math.div($i, $columns) * 100%};
					max-width: #{math.div($i, $columns) * 100%};
					padding-left: math.div($gutter, 2);
					padding-right: math.div($gutter, 2);
				}
			}
		}
	}
}

//----------------------------------------------------------------
// ? GRIDBOX UTILS:

// * GRID TEMPLATE PROPS: Columns, Rows and Auto Cols & Rows
@mixin createGridTemplates($bp: "") {
	@if ($classes == true) {
		@if ($bp == "") {
			@for $i from 1 through 12 {
				.grid-cols-#{$i} {
					grid-template-columns: repeat($i, minmax(auto, 1fr));
				}
				.grid-rows-#{$i} {
					grid-template-rows: repeat($i, minmax(auto, 1fr));
				}

				.grid-autocols-#{$i} {
					grid-auto-columns: #{$i * 1fr};
				}

				.grid-autorows-#{$i} {
					grid-auto-rows: #{$i * 1fr};
				}
			}
		} @else {
			@for $i from 1 through 12 {
				.grid-cols-#{$bp}-#{$i} {
					grid-template-columns: repeat($i, minmax(auto, 1fr));
				}
				.grid-rows-#{$bp}-#{$i} {
					grid-template-rows: repeat($i, 1fr);
				}

				.grid-autocols-#{$bp}-#{$i} {
					grid-auto-columns: #{$i * 1fr};
				}

				.grid-autorows-#{$bp}-#{$i} {
					grid-auto-rows: #{$i * 1fr};
				}
			}
		}
	}
}

// * GRID SPREADING PROPS: Start and End Cols and Rows:
@mixin createGridSpans($bp: "") {
	@if ($classes == true) {
		@if ($bp == "") {
			@for $i from 1 through 12 {
				.grid-colstart-#{$i} {
					grid-column-start: #{$i};
				}

				.grid-colend-#{$i} {
					grid-column-end: #{$i};
				}

				.grid-rowstart-#{$i} {
					grid-row-start: #{$i};
				}

				.grid-rowend-#{$i} {
					grid-row-end: #{$i};
				}
			}
		} @else {
			@for $i from 1 through 12 {
				.grid-colstart-#{$bp}-#{$i} {
					grid-column-start: #{$i};
				}

				.grid-colend-#{$bp}-#{$i} {
					grid-column-end: #{$i};
				}

				.grid-rowstart-#{$bp}-#{$i} {
					grid-row-start: #{$i};
				}

				.grid-rowend-#{$bp}-#{$i} {
					grid-row-end: #{$i};
				}
			}
		}
	}
}

// * GRID GAPS MEASURES: Cols and Rows Gutter:
@mixin createGridGutters($bp: "") {
	@if ($class == true) {
		@if ($bp == "") {
			@for $i from 1 through 100 {
				.gap-col-#{$i} {
					column-gap: #{$i * 1px};
				}

				.gap-row-#{$i} {
					row-gap: #{$i * 1px};
				}
			}
		} @else {
			.gap-col-#{$bp}-#{$i} {
				column-gap: #{$i * 1px};
			}

			.gap-row-#{$bp}-#{$i} {
				row-gap: #{$i * 1px};
			}
		}
	}
}

//----------------------------------------------------------------
// ? THEMES UTILS:

// * FONT FAMILIES UTILS:
@mixin createFontFamilies($bp: "") {
	$font-families: (
		"display": '"Jost", sans-serif',
		"serif": '"Lora", serif',
		"code": '"Source Code Pro", monospace',
	);

	@if ($classes == true) {
		@if ($bp == "") {
			@each $k, $family in $font-families {
				.ff-#{$k} {
					font-family: #{$family};
				}
			}
		} @else {
			@each $k, $family in $font-families {
				.ff-#{$bp}-#{$k} {
					font-family: #{$family};
				}
			}
		}
	}
}

// * FONT SIZES MEASURES:
@mixin createFontSizes($bp: "") {
	@if ($classes == true) {
		@for $size from 0 through 72 {
			@if ($bp == "") {
				.fz-#{$size} {
					font-size: #{$size * 0.5 * 0.2 * 1rem};
				}
			} @else {
				.fz-#{$bp}-#{$size} {
					font-size: #{$size * 0.5 * 0.2 * 1rem};
				}
			}
		}
	}
}

// * FONT WEIGHT MEASURES:
@mixin createFontWeights($bp: "") {
	@if ($classes == true) {
		@for $i from 1 to 10 {
			@if ($bp == "") {
				.fw-#{$i * 100} {
					font-weight: #{$i * 100};
				}
			} @else {
				.fw-#{$bp}-#{$i * 100} {
					font-weight: #{$i * 100};
				}
			}
		}
	}
}

// * LINEHEIGHTS MEASURES:
@mixin createLineheights($bp: "") {
	$line-heights: (
		"none": 0,
		"100": 1,
		"133": 1.33,
		"155": 1.55,
		"177": 1.77,
		"200": 2,
		"233": 2.33,
		"255": 2.55,
		"277": 2.77,
		"300": 3,
	);

	@if ($classes == true) {
		@each $k, $v in $line-heights {
			@if ($bp == "") {
				.lh-#{$k} {
					line-height: #{$v};
				}
			} @else {
				.lh-#{$bp}-#{$k} {
					line-height: #{$v};
				}
			}
		}
	}
}

// * TEXT PROPS AND LIST STYLES:
@mixin createTextProps($bp: "") {
	$text-aligns: (
		"left": left,
		"center": center,
		"right": right,
		"justify": justify,
		"none": none,
	);
	$text-decorations: (
		"none": none,
		"underline": underline,
		"overline": overline,
		"line-through": line-through,
	);
	$text-transforms: (
		"none": none,
		"uppercase": uppercase,
		"lowercase": lowercase,
		"capitalize": capitalize,
	);
	$list-styles: (
		"none": none,
		"circle": circle,
		"decimal": decimal,
		"decimal-zero": decimal-leading-zero,
		"upper-alpha": upper-alpha,
		"lower-alpha": lower-alpha,
		"upper-roman": upper-alpha,
		"lower-roman": lower-alpha,
		"square": square,
	);

	@if ($classes == true) {
		@each $k, $v in $text-aligns {
			@if ($bp == "") {
				@if ($k == "none") {
					.ta-none {
						text-align: none;
					}
				} @else {
					.text-#{$k} {
						text-align: #{$v};
					}
				}
			} @else {
				@if ($k == "none") {
					.ta-#{$bp}-none {
						text-align: none;
					}
				} @else {
					.text-#{$bp}-#{$k} {
						text-align: #{$v};
					}
				}
			}
		}

		@each $k, $v in $text-decorations {
			@if ($bp == "") {
				@if ($k == "none") {
					.tde-none {
						text-decoration: none;
					}
				} @else {
					.text-#{$k} {
						text-decoration: #{$v};
					}
				}
			} @else {
				@if ($k == "none") {
					.tde-#{$bp}-none {
						text-decoration: none;
					}
				} @else {
					.text-#{$bp}-#{$k} {
						text-decoration: #{$v};
					}
				}
			}
		}

		@each $k, $v in $text-transforms {
			@if ($bp == "") {
				@if ($k == "none") {
					.ttr-none {
						text-transform: none;
					}
				} @else {
					.text-#{$k} {
						text-transform: #{$v};
					}
				}
			} @else {
				@if ($k == "none") {
					.ttr-#{$bp}-none {
						text-transform: none;
					}
				} @else {
					.text-#{$bp}-#{$k} {
						text-transform: #{$v};
					}
				}
			}
		}

		@each $k, $v in $list-styles {
			@if ($bp == "") {
				@if ($k == "none") {
					.list-style-none {
						list-style: none;
					}
				} @else {
					.list-#{$k} {
						list-style: #{$v};
					}
				}
			} @else {
				@if ($k == "none") {
					.list-style-#{$bp}-none {
						list-style: none;
					}
				} @else {
					.list-#{$bp}-#{$k} {
						list-style: #{$v};
					}
				}
			}
		}
	}
}

// * BRAND COLORS: BkgColor, TextColor and HoverColors:
@mixin createThemeColors($bp: "") {
	$brandColors: (
		"current": currentColor,
		"alpha": transparent,
		"none": none,
		"indigo": #3d14b8,
		"salmon": #ff6347,
		"teal": #0e8181,
		"persian": #071f40,
		"success": #18dc7a,
		"danger": #e6192a,
		"warning": #f2d40d,
		"info": #1991e6,
		"gray100": #d7d6dc,
		"gray200": #9da4af,
		"gray300": #878a92,
		"gray400": #3e3b45,
		"light": #f0f0f0,
		"dark": #1c1c22,
	);

	@if ($classes == true) {
		@if ($bp == "") {
			@each $k, $v in $brandColors {
				.bg-#{$k} {
					background-color: #{$v};
				}
				.bg-hover-#{$k}:hover {
					background-color: #{$v};
				}
				.color-#{$k} {
					color: #{$v};
				}
				.color-hover-#{$k}:hover {
					color: #{$v};
				}
			}
		} @else {
			@each $k, $v in $brandColors {
				.bg-#{$bp}-#{$k} {
					background-color: #{$v};
				}
				.bg-hover-#{$bp}-#{$k}:hover {
					background-color: #{$v};
				}
				.color-#{$bp}-#{$k} {
					color: #{$v};
				}
				.color-hover-#{$bp}-#{$k}:hover {
					color: #{$v};
				}
			}
		}
	}
}

// * BREAKPOINTS AND MEDIA QUERIES SIZES:
@mixin media-up($device) {
	@media screen and (min-width: map-get($breakpoints, #{$device})) {
		@content;
	}
}

@mixin media-down($device) {
	@media screen and (max-width: map-get($breakpoints, #{$device})) {
		@content;
	}
}
